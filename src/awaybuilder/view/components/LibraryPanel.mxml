<?xml version="1.0" encoding="utf-8"?>
<controls:CollapsiblePanel xmlns:fx="http://ns.adobe.com/mxml/2009" 
						   xmlns:s="library://ns.adobe.com/flex/spark" 
						   xmlns:mx="library://ns.adobe.com/flex/mx" 
						   xmlns:controls="awaybuilder.view.components.controls.*" 
						   xmlns:tree="awaybuilder.view.components.controls.tree.*"
						   skinClass="awaybuilder.view.skins.CollapsiblePanelSkin" creationComplete="collapsiblepanel_creationCompleteHandler(event)">
	<fx:Declarations>
		<s:Power id="collapseEaser" exponent="2" easeInFraction="0.1" />
		<s:Resize id="collapseEffect" duration="150" easer="{collapseEaser}" heightTo="24" />
		<fx:Component className="NewGeometryPopup">
			<s:SkinnablePopUpContainer skinClass="awaybuilder.view.skins.LibrarySkinnablePopUpContainer" chromeColor="0x1d1d1c" color="0xdbdbdb" mouseDownOutside="close();" >
				<s:Button width="100%" label="New PlaneGeometry" styleName="addItemButton" cornerRadius="0" click="close(true,'PlaneGeometry')"/>
				<s:Button width="100%" label="New CubeGeometry" styleName="addItemButton" cornerRadius="0" click="close(true,'CubeGeometry')"/>
				<s:Button width="100%" label="New SphereGeometry" styleName="addItemButton" cornerRadius="0" click="close(true,'SphereGeometry')"/>
				<s:Button width="100%" label="New CylinderGeometry" styleName="addItemButton" cornerRadius="0" click="close(true,'CylinderGeometry')"/>
				<s:Button width="100%" label="New ConeGeometry" styleName="addItemButton" cornerRadius="0" click="close(true,'ConeGeometry')"/>
				<s:Button width="100%" label="New CapsuleGeometry" styleName="addItemButton" cornerRadius="0" click="close(true,'CapsuleGeometry')"/>
				<s:Button width="100%" label="New TorusGeometry" styleName="addItemButton" cornerRadius="0" click="close(true,'TorusGeometry')"/>
			</s:SkinnablePopUpContainer>
		</fx:Component>
		<fx:Component className="NewObjectsPopup">
			<s:SkinnablePopUpContainer skinClass="awaybuilder.view.skins.LibrarySkinnablePopUpContainer" chromeColor="0x1d1d1c" color="0xdbdbdb" mouseDownOutside="close();" >
				<s:Button width="100%" label="New ExpandMesh" styleName="addItemButton" cornerRadius="0" click="close(true,'ExpandMesh')"/>
				<s:Button width="100%" label="New Mesh" styleName="addItemButton" cornerRadius="0" click="close(true,'Mesh')"/>
				<s:Button width="100%" label="New SkyBox" styleName="addItemButton" cornerRadius="0" click="close(true,'SkyBox')"/>
			</s:SkinnablePopUpContainer>
		</fx:Component>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import away3d.containers.ObjectContainer3D;
			
			import awaybuilder.model.vo.DocumentVO;
			import awaybuilder.model.vo.DroppedAssetVO;
			import awaybuilder.model.vo.LibraryItemVO;
			import awaybuilder.model.vo.scene.AssetVO;
			import awaybuilder.model.vo.DroppedTreeItemVO;
			import awaybuilder.view.components.controls.tree.TreeEvent;
			import awaybuilder.view.components.events.CoreEditorEvent;
			import awaybuilder.view.components.events.LibraryPanelEvent;
			
			import flash.utils.clearTimeout;
			import flash.utils.setTimeout;
			
			import mx.collections.ArrayCollection;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.events.SandboxMouseEvent;
			
			import spark.components.supportClasses.ButtonBase;
			import spark.events.IndexChangeEvent;
			import spark.events.PopUpEvent;
			
			[Bindable] 
			public var model:DocumentVO = new DocumentVO();
			
			[Bindable] 
			public var selectedSceneItems:Vector.<Object> = new Vector.<Object>();
			[Bindable] 
			public var selectedMaterialsItems:Vector.<Object> = new Vector.<Object>();
			[Bindable] 
			public var selectedTexturesItems:Vector.<Object> = new Vector.<Object>();
			[Bindable] 
			public var selectedGeometryItems:Vector.<Object> = new Vector.<Object>();
			[Bindable] 
			public var selectedMethodsItems:Vector.<Object> = new Vector.<Object>();
			[Bindable] 
			public var selectedAnimationsItems:Vector.<Object> = new Vector.<Object>();
			[Bindable] 
			public var selectedLightsItems:Vector.<Object> = new Vector.<Object>();
			
			private var _expandedPanel:CollapsiblePanel;
			private var _panels:Array;
			
			private var _tempSelectedItems:Vector.<Object>;
			
			protected function panel_collapsedChangeHandler(event:Event):void
			{
				var panel:CollapsiblePanel = event.target as CollapsiblePanel;
				if( panel.collapsed ) 
				{
					collapseEffect.play( [panel] );
					
					if( _expandedPanel == panel ) 
					{
						getNextPanel(panel).collapsed = false;
					}
				}
				else 
				{
					_expandedPanel = panel;
					panel.percentHeight = 100;
					collapseAllExcept( panel );
				}
			}
			private function collapseAllExcept( panel:CollapsiblePanel ):void
			{
				for each( var p:CollapsiblePanel in _panels )
				{
					if( p != panel ) p.collapsed = true;
				}
			}
			private function getNextPanel( panel:CollapsiblePanel ):CollapsiblePanel
			{
				var result:int = 0;
				for (var i:int = 0; i < _panels.length; i++) 
				{
					if( _panels[i] == panel ) 
					{
						if( i+1 < _panels.length ) return _panels[i+1]
					}
						
				}
				return _panels[0];
			}
			
			protected function collapsiblepanel_creationCompleteHandler(event:FlexEvent):void
			{
				_expandedPanel = scenePanel;
				_panels = [scenePanel,geometryPanel ];
			}
			
			protected function tree_changeHandler(event:IndexChangeEvent):void
			{
				var tree:Tree = event.target as Tree;
				_tempSelectedItems = tree.selectedItems;
				
				systemManager.getSandboxRoot().addEventListener(SandboxMouseEvent.MOUSE_UP_SOMEWHERE, mouseUpHandler, false, 0, true);
				systemManager.getSandboxRoot().addEventListener(MouseEvent.MOUSE_UP, mouseUpHandler, false, 0, true);
			}
			
			private function mouseUpHandler( event:Event ):void
			{
				this.dispatchEvent( new LibraryPanelEvent( LibraryPanelEvent.TREE_CHANGE, _tempSelectedItems ) );
				systemManager.getSandboxRoot().removeEventListener(MouseEvent.MOUSE_UP, mouseUpHandler, false);
				systemManager.getSandboxRoot().removeEventListener(SandboxMouseEvent.MOUSE_UP_SOMEWHERE, mouseUpHandler, false);
			}
			
			protected function scenePanel_addNewItemHandler(event:MouseEvent):void
			{
				var button:ButtonBase = event.relatedObject as ButtonBase;
				var popup:NewObjectsPopup = new NewObjectsPopup();
				popup.open(this);
				popup.addEventListener('close', newObjectPopup_closeHandler);
				var pos:Point = button.localToGlobal( new Point() );
				popup.move( pos.x-4,  Math.min(pos.y-4, stage.height-popup.height-8) );
			}
			
			private function newObjectPopup_closeHandler(event:PopUpEvent):void 
			{
				if (!event.commit) return;
				switch(event.data)
				{
					case "ExpandMesh":
						this.dispatchEvent( new LibraryPanelEvent( LibraryPanelEvent.ADD_EXPANDMESH ) );
						break;
					case "Mesh":
						this.dispatchEvent( new LibraryPanelEvent( LibraryPanelEvent.ADD_MESH ) );
						break;
					default:
						this.dispatchEvent( new LibraryPanelEvent( LibraryPanelEvent.ADD_SKYBOX ) );
						break;
				}
			}  

			private function geometryPanel_addNewItemHandler(event:MouseEvent):void
			{
				var button:ButtonBase = event.relatedObject as ButtonBase;
				var popup:NewGeometryPopup = new NewGeometryPopup();
				popup.open(this);
				popup.addEventListener('close', newGeometryPopup_closeHandler);
				var pos:Point = button.localToGlobal( new Point() );
				popup.move( pos.x-4,  Math.min(pos.y-4, stage.height-popup.height-8) );
			}
			
			private function newEffectPopup_closeHandler(event:PopUpEvent):void 
			{
				if (!event.commit) return;
				this.dispatchEvent( new LibraryPanelEvent( LibraryPanelEvent.ADD_EFFECTMETHOD, event.data ) );
			}  
			private function newGeometryPopup_closeHandler(event:PopUpEvent):void 
			{
				if (!event.commit) return;
				this.dispatchEvent( new LibraryPanelEvent( LibraryPanelEvent.ADD_GEOMETRY, event.data ) );
			}  
			
			protected function tree_dragStartHandler(event:DragEvent):void
			{
				systemManager.getSandboxRoot().removeEventListener(MouseEvent.MOUSE_UP, mouseUpHandler, false);
				systemManager.getSandboxRoot().removeEventListener(SandboxMouseEvent.MOUSE_UP_SOMEWHERE, mouseUpHandler, false);
			}
			
			
			
			
			protected function sceneTree_itemDroppedHandler(event:TreeEvent):void
			{
				this.dispatchEvent( new LibraryPanelEvent( LibraryPanelEvent.SCENEOBJECT_DROPPED, event.item ) );
			}
			
			protected function sceneTree_dragCompleteHandler(event:DragEvent):void
			{
				sceneTree.selectedItems = selectedSceneItems;
			}
			
			
			protected function animationsTree_itemDroppedHandler(event:TreeEvent):void
			{
				this.dispatchEvent( new LibraryPanelEvent( LibraryPanelEvent.ANIMATIONS_DROPPED, getAssetsFromDroppedItem(event.item as Dictionary) ) );
			}
			
			private function getAssetsFromDroppedItem( items:Dictionary ):Vector.<DroppedAssetVO>
			{
				var droppedAsses:Vector.<DroppedAssetVO> = new Vector.<DroppedAssetVO>;
				for each( var item:DroppedTreeItemVO in items ) 
				{
					var droppedAsset:DroppedAssetVO = new DroppedAssetVO();
					droppedAsset.value = LibraryItemVO(item.value).asset;
					droppedAsset.oldPosition = item.oldPosition;
					droppedAsset.newPosition = item.newPosition;
					if( item.oldParent )
					{
						droppedAsset.oldParent = LibraryItemVO(item.oldParent).asset;
					}
					if( item.newParent )
					{
						droppedAsset.newParent = LibraryItemVO(item.newParent).asset;
					}
					droppedAsses.push( droppedAsset );
				}
				return droppedAsses;
			}
			
		]]>
	</fx:Script>
	<s:VGroup width="225" height="100%" gap="0">
		<controls:LibraryCollapsiblePanel id="scenePanel" skinClass="awaybuilder.view.skins.CollapsibleDropdownLibraryPanelSkin" borderVisible="false"
								   title="Scene Objects" width="100%" collapsed="false" height="100%" addEnabled="true"
								   addNewItem="scenePanel_addNewItemHandler(event)"
								   collapsedChange="panel_collapsedChangeHandler(event)">
			<controls:SceneTree id="sceneTree" dataProvider="{model.scene}" selectedItems="{selectedSceneItems}" indentation="10"
					   dragEnabled="true" dropEnabled="true" dragMoveEnabled="true"
					   focusSkin="mx.core.UIComponent"
					   change="tree_changeHandler(event)"
					   itemDropped="sceneTree_itemDroppedHandler(event)"
					   dragComplete="sceneTree_dragCompleteHandler(event)"
					   width="100%" height="100%"/>
		</controls:LibraryCollapsiblePanel>
		<controls:LibraryCollapsiblePanel id="geometryPanel" skinClass="awaybuilder.view.skins.CollapsibleDropdownLibraryPanelSkin" borderVisible="false"
								   title="Geometry" height="24" width="100%" collapsed="true" collapsedChange="panel_collapsedChangeHandler(event)"
								   addNewItem="geometryPanel_addNewItemHandler(event)" addEnabled="true">
			<tree:Tree id="geometryTree" dataProvider="{model.geometry}" selectedItems="{selectedGeometryItems}" indentation="10"
					   change="tree_changeHandler(event)"
					   width="100%" height="100%"/>
		</controls:LibraryCollapsiblePanel>

	</s:VGroup>
	
</controls:CollapsiblePanel>
