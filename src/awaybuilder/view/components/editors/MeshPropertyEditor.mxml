<?xml version="1.0" encoding="utf-8"?>
<editors:EditorBase xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark" xmlns:components="awaybuilder.view.components.*" xmlns:controls="awaybuilder.view.components.controls.*"
		 xmlns:editors="awaybuilder.view.components.editors.*">
	<fx:Declarations>
	</fx:Declarations>
    <fx:Script><![CDATA[
		import away3d.entities.Mesh;
		
		import awaybuilder.model.vo.scene.AnimatorVO;
		import awaybuilder.model.vo.scene.AssetVO;
		import awaybuilder.model.vo.scene.ExtraItemVO;
		import awaybuilder.model.vo.scene.MeshVO;
		import awaybuilder.model.vo.scene.ObjectVO;
		import awaybuilder.model.vo.scene.SubMeshVO;
		import awaybuilder.utils.AssetUtil;
		import awaybuilder.view.components.editors.events.PropertyEditorEvent;
		
		import flashx.textLayout.debug.assert;
		
		import mx.collections.ArrayCollection;
		import mx.controls.Alert;
		import mx.events.FlexEvent;
		import mx.utils.NameUtil;
		
		import spark.events.GridItemEditorEvent;
		import spark.events.IndexChangeEvent;

		[Bindable]
		private var _asset:MeshVO;
		
		override protected function validate(asset:Object):void
		{
			if( !(asset is MeshVO) ) return;
			if( asset is MeshVO ) _asset = MeshVO(asset).clone() as MeshVO;
			
			trace( "validate = " + _asset.animator );
		}

        private function position_commitHandler(event:Event):void 
		{
            var newValue:Vector3D = new Vector3D(xStepper.value, yStepper.value, zStepper.value);
            dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.TRANSLATE, newValue));
        }
		private function pivot_commitHandler(event:Event):void {
			_asset.pivotX = pivotXStepper.value;
			_asset.pivotY = pivotYStepper.value;
			_asset.pivotZ = pivotZStepper.value;
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.MESH_STEPPER_CHANGE, _asset));
		}
        private function rotation_commitHandler(event:Event):void 
		{
            var newValue:Vector3D = new Vector3D(rotationXStepper.value, rotationYStepper.value, rotationZStepper.value);
            dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.ROTATE, newValue));
        }

        private function scale_commitHandler(event:Event):void 
		{
            var newValue:Vector3D = new Vector3D(scaleXStepper.value, scaleYStepper.value, scaleZStepper.value);
            dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.SCALE, newValue));
        }

        private function name_changeHandler(event:Event):void 
		{
            dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.MESH_STEPPER_CHANGE, _asset));
        }

        private function castShadowBox_changeHandler(event:Event):void 
		{
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.MESH_CHANGE, _asset));
        }

		private function addExtraButton_clickHandler(event:MouseEvent):void
		{
			var extra:ExtraItemVO = new ExtraItemVO();
			var i:int = 0;
			while( !isCorrectName( "key"+i ) )
			{
				i++;
			}
			extra.name = "key"+i;
			_asset.extras.addItem(extra);
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.MESH_CHANGE, _asset));
		}
		private function deleteExtraButton_clickHandler(event:MouseEvent):void
		{
			if( extrasGrid.selectedIndex>-1 )
			{
				_asset.extras.removeItemAt( extrasGrid.selectedIndex );
			}
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.MESH_CHANGE, _asset));
		}
		
		protected function extrasGrid_gridItemEditorSessionSaveHandler(event:GridItemEditorEvent):void
		{
			var extra:ExtraItemVO = _asset.extras.getItemAt( event.rowIndex ) as ExtraItemVO;
			if( event.column.dataField == "name" )
			{
				if( !isCorrectExtra(extra) )
				{
					Alert.show("Name must be unique", "Warning");
					_asset.extras = ObjectVO(data).clone().extras;
					return;
				}
			}
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.MESH_STEPPER_CHANGE, _asset));
		}
		private function isCorrectExtra( extra:ExtraItemVO ):Boolean
		{
			for each( var item:ExtraItemVO in _asset.extras )
			{
				if( (extra.name == item.name) && (extra != item) ) return false;
			}
			return true;
		}
		private function isCorrectName( extra:String ):Boolean
		{
			for each( var item:ExtraItemVO in _asset.extras )
			{
				if( extra == item.name ) return false;
			}
			return true;
		}
		
		protected function geometryDropDownList_changeHandler(event:IndexChangeEvent):void
		{
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.MESH_CHANGE, _asset));
		}
		
		protected function animatorDropDownList_changeHandler(event:IndexChangeEvent):void
		{
			trace( "animatorDropDownList_changeHandler = " + animatorDropDownList_changeHandler );
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.MESH_CHANGE, _asset));
		}
		
		protected function geometryDropDownListButton_clickHandler(event:MouseEvent):void
		{
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.SHOW_CHILD_PROPERTIES, _asset.geometry));
		}
		
		protected function animatorDropDownListButton_clickHandler(event:MouseEvent):void
		{
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.SHOW_CHILD_PROPERTIES, _asset.animator));
		}
		
		public function animatorDropDownLabelFunction(item:AnimatorVO):String {
			if( item ) return item.name;
			return "Null"; 
		}
		
	]]></fx:Script>

	
	<s:Group width="100%" top="0">
		<s:Rect left="0" right="0" top="3" bottom="3">
			<s:fill>
				<s:SolidColor color="0x111111" alpha="0.3"/>
			</s:fill>
		</s:Rect>
		<s:HGroup width="100%" verticalAlign="middle" paddingLeft="2" paddingRight="2" paddingTop="4" paddingBottom="4">
			<s:Button id="editParentObjectButton" styleName="editParentObjectButtonStyle" visible="{prevSelected.length>0}"
					  width="32" height="32" click="editParentObjectButton_clickHandler(event)"/>
			<s:Label width="100%" text="Mesh" fontWeight="bold" fontSize="14"/>
		</s:HGroup>
	</s:Group>
	
	<s:Form width="100%" skinClass="awaybuilder.view.skins.PropertyFormSkin">
		<s:FormItem label="Name" skinClass="awaybuilder.view.skins.PropertyFormItemSkin" width="100%">
			<s:TextInput id="nameInput" width="100%" text="@{_asset.name}" change="name_changeHandler(event)"/>
		</s:FormItem>
	</s:Form>
	<s:Spacer height="6"/>
	
    <controls:CollapsiblePanel width="100%" title="General" collapsed="false">
		<s:Form height="100%" skinClass="awaybuilder.view.skins.PropertyFormSkin">
			<s:FormItem label="Cast Shadows" skinClass="awaybuilder.view.skins.PropertyFormItemSkin" width="100%">
				<s:CheckBox id="castShadowBox" change="castShadowBox_changeHandler(event)" selected="@{_asset.castsShadows}"/>
			</s:FormItem>
		</s:Form>
		<controls:PropertiesItemContainer label="Geometry" width="100%">
			<s:DropDownList id="geometryDropDownList" requireSelection="true" labelField="name"
							change="geometryDropDownList_changeHandler(event)" width="100%"
							selectedItem="@{_asset.geometry}" dataProvider="{geometry}"/>
			<s:Button styleName="editSharedObjectButtonStyle" width="23" height="100%" click="geometryDropDownListButton_clickHandler(event)" />
		</controls:PropertiesItemContainer>
		<!--<controls:PropertiesItemContainer label="Animator" width="100%">
			<s:DropDownList id="animatorDropDownList" labelFunction="animatorDropDownLabelFunction" prompt="Null" requireSelection="true"
							change="animatorDropDownList_changeHandler(event)" width="100%"
							selectedItem="@{_asset.animator}" dataProvider="{animators}"/>
			<s:Button styleName="editSharedObjectButtonStyle" width="23" height="100%" click="animatorDropDownListButton_clickHandler(event)" enabled="{_asset.animator!=null}" />
		</controls:PropertiesItemContainer>-->
    </controls:CollapsiblePanel>
    <controls:CollapsiblePanel width="100%" title="Transformations" collapsed="true">
        <s:Form width="100%" skinClass="awaybuilder.view.skins.PropertyFormSkin">
            <s:FormItem label="Position" skinClass="awaybuilder.view.skins.PropertyFormItemSkin" width="100%">
                <controls:DragableNumericStepper id="xStepper" stepSize="1" snapInterval="0.001" width="100%" value="{_asset.x}" change="position_commitHandler(event)" />
                <controls:DragableNumericStepper id="yStepper" stepSize="1" snapInterval="0.001" width="100%" value="{_asset.y}" change="position_commitHandler(event)"/>
                <controls:DragableNumericStepper id="zStepper" stepSize="1" snapInterval="0.001" width="100%" value="{_asset.z}" change="position_commitHandler(event)"/>
            </s:FormItem>
			<s:FormItem label="Pivot Point" skinClass="awaybuilder.view.skins.PropertyFormItemSkin" width="100%">
				<controls:DragableNumericStepper id="pivotXStepper" stepSize="1" snapInterval="0.001" width="100%" value="{_asset.pivotX}" change="pivot_commitHandler(event)" />
				<controls:DragableNumericStepper id="pivotYStepper" stepSize="1" snapInterval="0.001" width="100%" value="{_asset.pivotY}" change="pivot_commitHandler(event)"/>
				<controls:DragableNumericStepper id="pivotZStepper" stepSize="1" snapInterval="0.001" width="100%" value="{_asset.pivotZ}"  change="pivot_commitHandler(event)"/>
			</s:FormItem>
            <s:FormItem label="Rotation" skinClass="awaybuilder.view.skins.PropertyFormItemSkin" width="100%">
                <controls:DragableNumericStepper id="rotationXStepper" stepSize="1" snapInterval="0.01" allowValueWrap="true" minimum="-360" maximum="360" width="100%" value="{_asset.rotationX}" change="rotation_commitHandler(event)"/>
                <controls:DragableNumericStepper id="rotationYStepper" stepSize="1" snapInterval="0.01" allowValueWrap="true" minimum="-360" maximum="360" width="100%" value="{_asset.rotationY}" change="rotation_commitHandler(event)"/>
                <controls:DragableNumericStepper id="rotationZStepper" stepSize="1" snapInterval="0.01" allowValueWrap="true" minimum="-360" maximum="360" width="100%" value="{_asset.rotationZ}" change="rotation_commitHandler(event)"/>
            </s:FormItem>
			<controls:HorizontalFormSeparator/>
            <s:FormItem label="Scale" skinClass="awaybuilder.view.skins.PropertyFormItemSkin" width="100%">
                <controls:DragableNumericStepper id="scaleXStepper" stepSize="0.01" snapInterval="0.01" width="100%" value="{_asset.scaleX}" change="scale_commitHandler(event)" />
                <controls:DragableNumericStepper id="scaleYStepper" stepSize="0.01" snapInterval="0.01" width="100%" value="{_asset.scaleY}" change="scale_commitHandler(event)"/>
                <controls:DragableNumericStepper id="scaleZStepper" stepSize="0.01" snapInterval="0.01" width="100%" value="{_asset.scaleZ}" change="scale_commitHandler(event)"/>
            </s:FormItem>
        </s:Form>
    </controls:CollapsiblePanel>
    <controls:CollapsiblePanel width="100%" title="Materials" collapsed="false">
        <s:List dataProvider="{_asset.subMeshes}" width="100%" skinClass="awaybuilder.view.skins.SubMeshesListSkin"/>
    </controls:CollapsiblePanel>
	<controls:CollapsiblePanel width="100%" title="Extras" collapsed="true">
		<s:DataGrid width="100%" id="extrasGrid" dataProvider="{_asset.extras}" focusEnabled="false"
					editable="true" requestedMinRowCount="4" requestedMaxRowCount="6"
					selectionColor="0x111111" rollOverColor="0x222222" 
					gridItemEditorSessionSave="extrasGrid_gridItemEditorSessionSaveHandler(event)">
			<s:columns> 
				<s:ArrayList>
					<s:GridColumn headerText="Name" dataField="name" editable="true"/> 
					<s:GridColumn headerText="Value" dataField="value" editable="true"/> 
				</s:ArrayList>
			</s:columns> 
		</s:DataGrid>
		<s:HGroup width="100%" paddingTop="0" paddingBottom="0" paddingLeft="0" paddingRight="0" horizontalAlign="right">
			<s:Button id="addButton" toolTip="Add New" styleName="addButton" click="addExtraButton_clickHandler(event)" height="22" width="22"/>
			<s:Button id="deleteButton" enabled="{extrasGrid.selectedIndex>-1}" toolTip="Remove" styleName="removeButton"
					  click="deleteExtraButton_clickHandler(event)" height="22" width="22"/>
		</s:HGroup>
	</controls:CollapsiblePanel>
	
</editors:EditorBase>
