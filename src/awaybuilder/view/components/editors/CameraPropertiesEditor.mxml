<?xml version="1.0" encoding="utf-8"?>
<editors:EditorBase xmlns:fx="http://ns.adobe.com/mxml/2009"
					xmlns:s="library://ns.adobe.com/flex/spark" 
					xmlns:components="awaybuilder.view.components.*" 
					xmlns:controls="awaybuilder.view.components.controls.*"
					xmlns:mx="library://ns.adobe.com/flex/mx"
					xmlns:editors="awaybuilder.view.components.editors.*" 
					>
	<fx:Declarations>
		<s:ArrayCollection id="lensList">
			<fx:Object label="PerspectiveLens" value="PerspectiveLens"/>
			<fx:Object label="OrthographicLens" value="OrthographicLens"/>
			<fx:Object label="OrthographicOffCenterLens" value="OrthographicOffCenterLens"/>
		</s:ArrayCollection>
	</fx:Declarations>
	<fx:Script><![CDATA[
		import awaybuilder.model.vo.scene.CameraVO;
		import awaybuilder.model.vo.scene.ExtraItemVO;
		import awaybuilder.model.vo.scene.ObjectVO;
		import awaybuilder.model.vo.scene.TextureProjectorVO;
		import awaybuilder.view.components.editors.events.PropertyEditorEvent;
		
		import mx.controls.Alert;
		
		import spark.events.GridItemEditorEvent;
		import spark.events.IndexChangeEvent;
		
		[Bindable]
		private var _asset:CameraVO;
		
		[Bindable]
		private var _selectedLens:Object;
		
		override protected function validate(asset:Object):void
		{
			if( !(asset is CameraVO) ) return;
			_asset = CameraVO(asset).clone() as CameraVO;
			
			var item:Object;
			for each(item in lensList) 
			{
				if( item.value == _asset.lens.type ) {
					_selectedLens = item;
				}
			}
		}
		
		private function position_commitHandler(event:Event):void {
			var newValue:Vector3D = new Vector3D(xStepper.value, yStepper.value, zStepper.value);
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.TRANSLATE, newValue));
		}
		private function pivot_commitHandler(event:Event):void {
			_asset.pivotX = pivotXStepper.value;
			_asset.pivotY = pivotYStepper.value;
			_asset.pivotZ = pivotZStepper.value;
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.CAMERA_STEPPER_CHANGE, _asset));
		}
		private function rotation_commitHandler(event:Event):void 
		{
			var newValue:Vector3D = new Vector3D(rotationXStepper.value, rotationYStepper.value, rotationZStepper.value);
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.ROTATE, newValue, true));
		}
		private function scale_commitHandler(event:Event):void 
		{
			var newValue:Vector3D = new Vector3D(scaleXStepper.value, scaleYStepper.value, scaleZStepper.value);
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.SCALE, newValue, true));
		}
		
		protected function stepper_changeHandler(event:Event):void
		{
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.CAMERA_STEPPER_CHANGE, _asset));
		}
		
		protected function value_changeHandler(event:Event):void
		{
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.CAMERA_CHANGE, _asset));
		}
		
		protected function extrasGrid_gridItemEditorSessionSaveHandler(event:GridItemEditorEvent):void
		{
			var extra:ExtraItemVO = _asset.extras.getItemAt( event.rowIndex ) as ExtraItemVO;
			if( event.column.dataField == "name" )
			{
				if( !isCorrectExtra(extra) )
				{
					Alert.show("Name must be unique", "Warning");
					_asset.extras = ObjectVO(data).clone().extras;
					return;
				}
			}
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.CAMERA_STEPPER_CHANGE, _asset));
		}
		private function addExtraButton_clickHandler(event:MouseEvent):void
		{
			var extra:ExtraItemVO = new ExtraItemVO();
			var i:int = 0;
			while( !isCorrectName( "key"+i ) )
			{
				i++;
			}
			extra.name = "key"+i;
			_asset.extras.addItem(extra);
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.CAMERA_CHANGE, _asset));
		}
		private function deleteExtraButton_clickHandler(event:MouseEvent):void
		{
			if( extrasGrid.selectedIndex>-1 )
			{
				_asset.extras.removeItemAt( extrasGrid.selectedIndex );
			}
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.CAMERA_CHANGE, _asset));
		}
		private function isCorrectName( extra:String ):Boolean
		{
			for each( var item:ExtraItemVO in _asset.extras )
			{
				if( extra == item.name ) return false;
			}
			return true;
		}
		private function isCorrectExtra( extra:ExtraItemVO ):Boolean
		{
			for each( var item:ExtraItemVO in _asset.extras )
			{
				if( (extra.name == item.name) && (extra != item) ) return false;
			}
			return true;
		}
		
		protected function lensDropDownList_changeHandler(event:IndexChangeEvent):void
		{
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.CAMERA_LENS_CHANGE, lensDropDownList.selectedItem.value));
		}
		
		protected function lens_clickHandler(event:MouseEvent):void
		{
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.SHOW_CHILD_PROPERTIES, _asset.lens, true));
		}
		
	]]></fx:Script>
	
	<s:Group width="100%" top="0">
		<s:Rect left="0" right="0" top="3" bottom="3">
			<s:fill>
				<s:SolidColor color="0x111111" alpha="0.3"/>
			</s:fill>
		</s:Rect>
		<s:HGroup width="100%" verticalAlign="middle" paddingLeft="2" paddingRight="2" paddingTop="4" paddingBottom="4">
			<s:Button id="editParentObjectButton" styleName="editParentObjectButtonStyle" visible="{prevSelected.length>0}"
					  width="32" height="32" click="editParentObjectButton_clickHandler(event)"/>
			<s:Label width="100%" text="Camera3D" fontWeight="bold" fontSize="14"/>
		</s:HGroup>
	</s:Group>
	
	<s:Form width="100%" skinClass="awaybuilder.view.skins.PropertyFormSkin">
		<s:FormItem label="Name" skinClass="awaybuilder.view.skins.PropertyFormItemSkin" width="100%">
			<s:TextInput id="nameInput" width="100%" text="@{_asset.name}" change="stepper_changeHandler(event)"/>
		</s:FormItem>
	</s:Form>
	
	<controls:PropertiesItemContainer label="Lens" width="100%" paddingLeft="10" paddingRight="8" paddingTop="6">
		<s:DropDownList id="lensDropDownList" requireSelection="true"
						change="lensDropDownList_changeHandler(event)" width="100%"
						selectedItem="{_selectedLens}" dataProvider="{lensList}"
						/>
		<s:Button styleName="editSharedObjectButtonStyle" width="23" height="100%" click="lens_clickHandler(event)" />
	</controls:PropertiesItemContainer>
	<controls:CollapsiblePanel width="100%" title="Transformations" collapsed="true">
		<s:Form width="100%" skinClass="awaybuilder.view.skins.PropertyFormSkin">
			<s:FormItem label="Position" skinClass="awaybuilder.view.skins.PropertyFormItemSkin" width="100%">
				<controls:DragableNumericStepper id="xStepper" stepSize="1" snapInterval="0.001"
												 width="100%" value="{_asset.x}"
												 change="position_commitHandler(event)" />
				<controls:DragableNumericStepper id="yStepper" stepSize="1" snapInterval="0.001"
												 width="100%" value="{_asset.y}"
												 change="position_commitHandler(event)"/>
				<controls:DragableNumericStepper id="zStepper" stepSize="1" snapInterval="0.001"
												 width="100%" value="{_asset.z}"
												 change="position_commitHandler(event)"/>
			</s:FormItem>
			<s:FormItem label="Pivot Point" skinClass="awaybuilder.view.skins.PropertyFormItemSkin" width="100%">
				<controls:DragableNumericStepper id="pivotXStepper" stepSize="1" snapInterval="0.001"
												 width="100%" value="{_asset.pivotX}"
												 change="pivot_commitHandler(event)" />
				<controls:DragableNumericStepper id="pivotYStepper" stepSize="1" snapInterval="0.001"
												 width="100%" value="{_asset.pivotY}"
												 change="pivot_commitHandler(event)"/>
				<controls:DragableNumericStepper id="pivotZStepper" stepSize="1" snapInterval="0.001"
												 width="100%" value="{_asset.pivotZ}" 
												 change="pivot_commitHandler(event)"/>
			</s:FormItem>
			<s:FormItem label="Rotation" skinClass="awaybuilder.view.skins.PropertyFormItemSkin" width="100%">
				<controls:DragableNumericStepper id="rotationXStepper" stepSize="1" snapInterval="0.01" allowValueWrap="true"
												 minimum="-360" maximum="360" width="100%" value="{_asset.rotationX}" 
												 change="rotation_commitHandler(event)"/>
				<controls:DragableNumericStepper id="rotationYStepper" stepSize="1" snapInterval="0.01" allowValueWrap="true"
												 minimum="-360" maximum="360" width="100%" value="{_asset.rotationY}"
												 change="rotation_commitHandler(event)"/>
				<controls:DragableNumericStepper id="rotationZStepper" stepSize="1" snapInterval="0.01" allowValueWrap="true"
												 minimum="-360" maximum="360" width="100%" value="{_asset.rotationZ}" 
												 change="rotation_commitHandler(event)"/>
			</s:FormItem>
			<controls:HorizontalFormSeparator/>
			<s:FormItem label="Scale" skinClass="awaybuilder.view.skins.PropertyFormItemSkin" width="100%">
				<controls:DragableNumericStepper id="scaleXStepper" stepSize="0.01" snapInterval="0.01"
												 width="100%" value="{_asset.scaleX}"
												 change="scale_commitHandler(event)" />
				<controls:DragableNumericStepper id="scaleYStepper" stepSize="0.01" snapInterval="0.01"
												 width="100%" value="{_asset.scaleY}"
												 change="scale_commitHandler(event)"/>
				<controls:DragableNumericStepper id="scaleZStepper" stepSize="0.01" snapInterval="0.01"
												 width="100%" value="{_asset.scaleZ}"
												 change="scale_commitHandler(event)"/>
			</s:FormItem>
		</s:Form>
	</controls:CollapsiblePanel>
	<controls:CollapsiblePanel width="100%" title="Extras" collapsed="true">
		<s:DataGrid width="100%" id="extrasGrid" dataProvider="{_asset.extras}" focusEnabled="false"
					editable="true" requestedMinRowCount="4" requestedMaxRowCount="6"
					selectionColor="0x111111" rollOverColor="0x222222" 
					gridItemEditorSessionSave="extrasGrid_gridItemEditorSessionSaveHandler(event)">
			<s:columns> 
				<s:ArrayList>
					<s:GridColumn headerText="Name" dataField="name" editable="true"/> 
					<s:GridColumn headerText="Value" dataField="value" editable="true"/> 
				</s:ArrayList>
			</s:columns> 
		</s:DataGrid>
		<s:HGroup width="100%" paddingTop="0" paddingBottom="0" paddingLeft="0" paddingRight="0" horizontalAlign="right">
			<s:Button id="addButton" toolTip="Add New" styleName="addButton" click="addExtraButton_clickHandler(event)" height="22" width="22"/>
			<s:Button id="deleteButton" enabled="{extrasGrid.selectedIndex>-1}" toolTip="Remove" styleName="removeButton"
					  click="deleteExtraButton_clickHandler(event)" height="22" width="22"/>
		</s:HGroup>
	</controls:CollapsiblePanel>
	
</editors:EditorBase>
